version: '3.8'

x-defaults: &defaults
  EUREKA_SERVER_URL: http://eureka-server:8761/eureka/
  KAFKA_BOOTSTRAP_SERVERS: kafka:9092

services:
  eureka-server:
    build:
      context: ../eureka-server
      dockerfile: ../docker-compose/Dockerfile
      args:
        SERVICE_NAME: eureka-server
    container_name: eureka-server
    ports:
      - "8761:8761"
    networks:
      - taxi-network
    healthcheck:
      test: curl --fail --location http://eureka-server:8761/actuator/health
      interval: 1s
      timeout: 10s
      retries: 10
      start_period: 10s

  gateway:
    build:
      context: ../gateway
      dockerfile: ../docker-compose/Dockerfile
      args:
        SERVICE_NAME: gateway
    container_name: gateway
    environment:
      EUREKA_SERVER_URL: http://eureka-server:8761/eureka/
    ports:
      - "8080:8080"
    networks:
      - taxi-network
    depends_on:
      eureka-server:
        condition: service_healthy
    healthcheck:
      test: curl --fail --location http://gateway:8080/actuator/health
      interval: 1s
      timeout: 10s
      retries: 10
      start_period: 10s

  driver:
    build:
      context: ../driver
      dockerfile: ../docker-compose/Dockerfile
      args:
        SERVICE_NAME: driver
    container_name: driver
    environment:
      DB_URL: jdbc:postgresql://drivers-db:5432/drivers
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      <<: *defaults
    ports:
      - "8081:8081"
    depends_on:
      drivers-db:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      gateway:
        condition: service_healthy
      zookeeper:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - taxi-network
    healthcheck:
      test: curl --fail --location http://driver:8081/actuator/health
      interval: 1s
      timeout: 10s
      retries: 30
      start_period: 60s

  passenger:
    build:
      context: ../passenger
      dockerfile: ../docker-compose/Dockerfile
      args:
        SERVICE_NAME: passenger
    container_name: passenger
    environment:
      DB_URL: jdbc:postgresql://passengers-db:5432/passengers
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      <<: *defaults
    ports:
      - "8082:8082"
    depends_on:
      passengers-db:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      gateway:
        condition: service_healthy
      zookeeper:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - taxi-network
    healthcheck:
      test: curl --fail --location http://passenger:8082/actuator/health
      interval: 1s
      timeout: 10s
      retries: 30
      start_period: 60s

  ride:
    build:
      context: ../ride
      dockerfile: ../docker-compose/Dockerfile
      args:
        SERVICE_NAME: ride
    container_name: ride
    environment:
      DB_URL: jdbc:postgresql://rides-db:5432/rides
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      <<: *defaults
    ports:
      - "8083:8083"
    depends_on:
      rides-db:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      gateway:
        condition: service_healthy
      zookeeper:
        condition: service_healthy
      kafka:
        condition: service_healthy
      driver:
        condition: service_healthy
      passenger:
        condition: service_healthy
    networks:
      - taxi-network
    healthcheck:
      test: curl --fail --location http://ride:8083/actuator/health
      interval: 1s
      timeout: 10s
      retries: 30
      start_period: 60s

  rating:
    build:
      context: ../rating
      dockerfile: ../docker-compose/Dockerfile
      args:
        SERVICE_NAME: rating
    container_name: rating
    environment:
      DB_URL: jdbc:postgresql://rating-db:5432/rating
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      <<: *defaults
    ports:
      - "8084:8084"
    depends_on:
      rating-db:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      gateway:
        condition: service_healthy
      zookeeper:
        condition: service_healthy
      kafka:
        condition: service_healthy
      ride:
        condition: service_healthy
    networks:
      - taxi-network
    healthcheck:
      test: curl --fail --location http://rating:8084/actuator/health
      interval: 1s
      timeout: 10s
      retries: 30
      start_period: 60s

  rating-db:
    image: postgres:15-alpine
    container_name: rating_db
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: rating
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.utf8"
    ports:
      - "5433:5432"
    networks:
      - taxi-network
    volumes:
      - rating_data:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

  rides-db:
    image: postgres:15-alpine
    container_name: rides_db
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: rides
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.utf8"
    ports:
      - "5434:5432"
    networks:
      - taxi-network
    volumes:
      - rides_data:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

  passengers-db:
    image: postgres:15-alpine
    container_name: passenger_db
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: passengers
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.utf8"
    ports:
      - "5435:5432"
    networks:
      - taxi-network
    volumes:
      - passengers_data:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

  drivers-db:
    image: postgres:15-alpine
    container_name: driver_db
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: drivers
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.utf8"
    ports:
      - "5436:5432"
    networks:
      - taxi-network
    volumes:
      - drivers_data:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - taxi-network
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "2181" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    expose:
      - 9092
    ports:
      - "29092:29092"
    hostname: kafka
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9092,OUTSIDE://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://:9092,OUTSIDE://:29092
      KAFKA_ADVERTISED_PORT: 9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    networks:
      - taxi-network
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "kafka-topics.sh", "--list", "--bootstrap-server", "kafka:9092" ]
      interval: 10s
      timeout: 5s
      retries: 10

  elasticsearch:
    image: elasticsearch:7.14.0
    container_name: elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elk_data:/usr/share/elasticsearch/data/
      - ./elk-config/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
    environment:
      - discovery.type=single-node
      - http.host=0.0.0.0
      - transport.host=0.0.0.0
      - xpack.security.enabled=false
      - xpack.monitoring.enabled=false
      - cluster.name=elasticsearch
      - bootstrap.memory_lock=true
    networks:
      - taxi-network
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:9200/_cluster/health" ]
      interval: 30s
      timeout: 10s
      retries: 5

  logstash:
    image: logstash:7.14.0
    container_name: logstash
    ports:
      - "5044:5044"
      - "9600:9600"
    volumes:
      - ./elk-config/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
      - ./elk-config/logstash/logstash.yml:/usr/share/logstash/config/logstash.yml
      - ls_data:/usr/share/logstash/data
    networks:
      - taxi-network
    depends_on:
      elasticsearch:
        condition: service_healthy

  kibana:
    image: kibana:7.14.0
    container_name: kibana
    ports:
      - "5601:5601"
    volumes:
      - ./elk-config/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml
      - kb_data:/usr/share/kibana/data
    networks:
      - taxi-network
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:5601/api/status" ]
      interval: 30s
      timeout: 10s
      retries: 5

  filebeat:
    image: elastic/filebeat:7.14.0
    container_name: filebeat
    user: root
    command: [ "filebeat", "-e", "--strict.perms=false" ]
    volumes:
      - ./elk-config/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/log/syslog:/var/log/syslog:ro
      - /var/log/auth.log:/var/log/auth.log:ro
    networks:
      - taxi-network
    depends_on:
      elasticsearch:
        condition: service_healthy
      kibana:
        condition: service_healthy

  grafana:
    build: './grafana'
    user: "0"
    ports:
      - "3000:3000"
    volumes:
      - ./grafana:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      taxi-network:
        aliases:
          - grafana

  prometheus:
    image: prom/prometheus
    user: "0"
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus:/prometheus
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      taxi-network:
        aliases:
          - prometheus

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"
    networks:
      - taxi-network

volumes:
  rating_data:
  rides_data:
  passengers_data:
  drivers_data:
  elk_data:
  ls_data:
  kb_data:

networks:
  taxi-network:
    name: taxi-network
    driver: bridge