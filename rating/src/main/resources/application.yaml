spring:
  application:
    name: rating
  profiles:
    active: dev
  datasource:
    url: ${DB_URL:jdbc:postgresql://localhost:5433/rating}
    username: ${DB_USERNAME:postgres}
    password: ${DB_PASSWORD:postgres}
    driver-class-name: org.postgresql.Driver
  jpa:
    properties:
      hibernate:
        batch_size: 50
        fetch_size: 50
        show_sql: true
        format_sql: true
        hdm2ddl:
          auto: validate
        check_nullability: true
    open-in-view: false
  liquibase:
    change-log: db/changelog/db.changelog-master.xml
  cloud:
    openfeign:
      circuitbreaker:
        enabled: true
        alphanumeric-ids:
          enabled: true
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:29092}
  security:
    oauth2:
      client:
        registration:
          keycloak:
            client-id: taxi_client
            scope:
              - openid
        provider:
          keycloak:
            issuer-uri: ${KEYCLOAK_ISSUER_URI:http://localhost:8484/realms/taxi_realm}
      resourceserver:
        jwt:
          issuer-uri: ${KEYCLOAK_ISSUER_URI:http://localhost:8484/realms/taxi_realm}

management:
  endpoint:
    health:
      show-details: always
  endpoints:
    web:
      exposure:
        include: health,prometheus
  prometheus:
    metrics:
      distribution:
        percentiles-histogram:
          "[http.server.requests]": true
  health:
    circuitbreakers:
      enabled: true
resilience4j:
  circuitbreaker:
    configs:
      default:
        sliding-window-type: COUNT_BASED
        failure-rate-threshold: 50
        minimum-number-of-calls: 5
        automatic-transition-from-open-to-half-open-enabled: true
        wait-duration-in-open-state: 5s
        permitted-number-of-calls-in-half-open-state: 3
        sliding-window-size: 10
        register-health-indicator: true
    instances:
      ride-client:
        base-config: default

server:
  port: 8084
eureka:
  client:
    service-url:
      defaultZone: ${EUREKA_SERVER_URL:http://localhost:8761/eureka/}
  instance:
    metadataMap:
      "prometheus.scrape": "true"
      "prometheus.path": "/actuator/prometheus"
      "prometheus.port": "8084"